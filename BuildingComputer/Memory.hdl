// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000–0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications.
 */

CHIP Memory {

    IN  in[16], load, address[15];
    OUT out[16];

    PARTS:
	// Create a 1
	Not(in=load,out=notload);
	Or(a=load,b=notload,out=one);

	// Push the one to the proper selector
//	DMux(in=one,a=r0,b=r1a,sel=address[0]);
//	DMux(in=r1a,a=r1,b=r2,sel=address[1]);
	DMux4Way(in=one,a=r0a,b=r0b,c=r1,d=r2,sel=address[13..14]);
	Or(a=r0a,b=r0b,out=r0);

	// Set the load flags
	And(a=load,b=r0,out=loadr0);
	And(a=load,b=r1,out=loadr1);

	// Create the RAM
	RAM16K(in=regin0,out=reg0,load=r0,address=address[0..13]);
	Screen(in=regin1,out=reg1,load=r1,address=address[0..12]);
	Keyboard(out=reg2);
	Mux16(a=reg0,b=in,sel=loadr0,out=regin0);
	Mux16(a=reg1,b=in,sel=loadr1,out=regin1);

	// Push the output
//	Mux16(a=reg1,b=reg2,sel=address[1],out=reg1a);
//	Mux16(a=reg0,b=reg1a,sel=address[0],out=out);
	Mux4Way16(a=reg0,b=reg0,c=reg1,d=reg2,sel=address[13..14],out=out);
}
