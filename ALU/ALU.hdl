// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
	// zx
	Not16(in=x,out=notx);
	And16(a=x,b=notx,out=zero16);
	Mux16(a=x,b=zero16,sel=zx,out=x1);
	
	// nx
	Not16(in=x1,out=notx1);
	Mux16(a=x1,b=notx1,sel=nx,out=x2);

	// zy
	Not16(in=y,out=noty);
	Mux16(a=y,b=zero16,sel=zy,out=y1);
	
	// ny
	Not16(in=y1,out=noty1);
	Mux16(a=y1,b=noty1,sel=ny,out=y2);

	// f
	Add16(a=x2,b=y2,out=addxy);
	And16(a=x2,b=y2,out=andxy);
	Mux16(a=andxy,b=addxy,sel=f,out=out1);

	// no
	Not16(in=out1,out=notout);
	Mux16(a=out1,b=notout,sel=no,out=out2);
	Mux16(a=out1,b=notout,sel=no,out=out);

	// zr
	Or16Way(in=out2,out=zr1);
	Not(in=zr1,out=zr);

	// ng
	IsNeg16(in=out2,out=ng);
}
